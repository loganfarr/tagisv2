# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.13
jobs:
  # Build .NET API
  build-api:
    docker:
      specify the version you desire here
      - image: circleci/node:10.18.0
    steps: 
      - checkout
      - run: echo "API built"
      # - run: cd ~/tagisv2/tagis.Api
      # - run: [upload to s3]

    ### dotnet compilation may not be necessary with CloudFront ### 
    # executor:
    #   name: win/vs2019
    #   shell: powershell.exe
    # steps:
      # - checkout
      # - restore_cache:
      #     keys:
      #       - dotnet-packages-v1-{{ checksum "circleci-demo-windows.csproj" }}
      # - run:
      #     name: "Install project dependencies"
      #     command: dotnet.exe restore
      # - save_cache:
      #     paths:
      #       - C:\Users\circleci\.nuget\packages
      #     key: dotnet-packages-v1-{{ checksum "circleci-demo-windows.csproj" }}
      # - run:
      #     name: "Run Build step"
      #     command: dotnet.exe publish -c Release -r win10-x64
      # - run:
      #     name: "Test the executable"
      #     command: .\bin\Release\netcoreapp2.1\win10-x64\publish\circleci-demo-windows.exe
      # - store_artifacts:
      #     path: .\bin\Release\netcoreapp2.1\win10-x64\publish\circleci-demo-windows.exe

  # Build Angular Client
  build-client:
    branches:
      only:
        - master
    # Set job environment variables
    environment:
      S3BUCKET: tagis-build-bucket-temp
    docker:
      # specify the version you desire here
      - image: circleci/node:10.18.0

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    steps:
      - run: cd ~/tagisv2/tagis.Client
      - run: npm install
      - run: ng build --configuration="prod"
      - aws-s3/sync:
        from: dist
        to: 's3://${S3BUCKET}/client'
        arguments: |
          --acl public-read \
          --cache-control "max-age=86400"
        overwrite: true

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      # run tests!
      # - run: yarn test
workflows:
  version: 2
  build-tagis:
    jobs:
      - build-api
      - build-client