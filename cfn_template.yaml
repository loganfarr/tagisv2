AWSTemplateFormatVersion: "2010-09-09"
Description: Template for TAGIS application

# Global settings
Globals:
  Function:
    Runtime: dotnetcore2.1
    Timeout: 60
    
# Template Parameters
Parameters:
  EnvironmentClass:
    Description: Environment (dev, stage, prod)
    Type: String
    AllowedValues: [dev,stage,prod]
    
Resources:
  # IAM roles for buckets and RDS 
  TagisBucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
            Service:
              - "s3.amazonaws.com";
            Action:
              - "sts:AssumeRole"
        Path: "/"
  TagisBucketPolicy: 
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "TagisBucket"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Action: "*"
            Resource: "Tagis-Build-Bucket"
        Roles:
          -  
            Ref: "TagisBucketRole"
  TagisBucketProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - 
          Ref: "TagisbucketRole"
  
  # S3 bucket for Circle CI builds
  BuildBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      Bucket-Name: Tagis-Build-Bucket
      Tags:
        -
          Key: "client"
          Value: "Advent Group"
        -
          Key: "application"
          Value: "tagis-build"
          
  # S3 bucket for static website hosting
  ClientBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      Bucket-Name: Tagis-Client
      Tags:
        -
          Key: "client"
          Value: "Advent Group"
        -
          Key: "application"
          Value: "tagis-client"
      WebsiteConfiguration:
        IndexDocument: "index.html"
        
  # API Lambda Functions
  # GetOrders – GET /orders
  GetOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetOrders
      CodeUri: 
        Bucket: !GetAtt BuildBucket.Properties.Bucket-Name
        Key: tagis.Api/Controllers/OrdersController
      FunctionName: "tagis-${EnvironmentClass}-GetOrders"
      Events:
        GetOrders:
          Type: Api
          Properties:
            Path: /orders
            Method: get
            
  # GetOrderList – GET /orders/list
  GetOrderListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetOrderList
      CodeUri:
        Bucket: !GetAtt BuildBucket.Properties.Bucket-Name
        Key: tagis.Api/Controllers/OrdersController
      FunctionName: "tagis-${EnvironmentClass}-GetOrderList"
      Events:
        GetOrderList:
          Type: Api
          Properties:
            Path: /orders/list
            Method: get
            
  # GetOrder – GET /orders/{id}
  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetOrder
      CodeUri:
        Bucket: !GetAtt BuildBucket.Properties.Bucket-Name
        Key: tagis.Api/Controllers/OrdersController
      FunctionName: "tagis-${EnvironmentClass}-GetOrder"
      Events:
        GetOrder:
          Type: Api
          Properties: 
            Path: /orders/{id}
            Method: get
            
  # GetRecentOrders – GET /orders/recent
  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetRecentOrders
      CodeUri:
        Bucket: !GetAtt BuildBucket.Properties.Bucket-Name
        Key: tagis.Api/Controllers/OrdersController
      FunctionName: "tagis-${EnvironmentClass}-GetRecentOrders"
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /orders/recent
            Method: get

  # PostOrder – POST /orders
  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !GetAtt BuildBucket.Properties.Bucket-Name
        Key: tagis.Api/Controllers/OrdersController
      Handler: tagisApi::tagisApi.Controllers.OrdersController::PostOrder
      FunctionName: "tagis-${EnvironmentClass}-PostOrder"
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /orders
            Method: post