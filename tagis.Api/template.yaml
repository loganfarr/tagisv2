AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "API template for TAGIS application"

### Template Parameters
Parameters:
  EnvironmentClass:
    Description: Environment (Dev, Stage, Prod)
    Type: String
    AllowedValues: 
      - Dev
      - Stage
      - Prod
  ## SSM parameters
  DatabaseHost:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "tagis-Dev-database-host"
  DatabaseName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "tagis-Dev-database-name"
  DatabaseUser:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "tagis-Dev-database-username"
  DatabasePassword:
    Type: AWS::SSM::Parameter::Value<String> # @todo Change to securestring when cfn supports it
    Default: "tagis-Dev-database-password"
  VPCSecurityGroup:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "tagis-Dev-vpc-security-group-id"
  VPCSubnetIds: 
    Type: AWS::SSM::Parameter::Value<List<String>>
    Default: "tagis-Dev-vpc-subnet-ids"
  # Temporary subnet IDs until I figure out the list of strings option
  VPCSubnetId1:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "tagis-Dev-vpc-subnet-id-1"
  VPCSubnetId2:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "tagis-Dev-vpc-subnet-id-2"
  VPCSubnetId3:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "tagis-Dev-vpc-subnet-id-3"
  VPCSubnetId4:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "tagis-Dev-vpc-subnet-id-4"
      
### Globals 
Globals:
  Function:
    Runtime: dotnetcore2.1
    CodeUri: ./src/tagisApi/
    VpcConfig:
      SecurityGroupIds: 
        - !Ref VPCSecurityGroup
      SubnetIds: 
        - !Ref VPCSubnetId1
        - !Ref VPCSubnetId2
        - !Ref VPCSubnetId3
        - !Ref VPCSubnetId4
    Environment:
      Variables:
        DATABASE_HOST: !Ref DatabaseHost
        DATABASE_NAME: !Ref DatabaseName
        DATABASE_USER: !Ref DatabaseUser
        DATABASE_PASS: !Ref DatabasePassword
        
### Template resources
Resources:
  ## API models
  # Store
  StoreModel:
    Type: AWS::ApiGateway::Model
    DependsOn: TagisRestApi
    Properties:
      RestApiId: !Ref TagisRestApi
      ContentType: application/json
      Description: Schema for TAGIS stores
      Name: StoreModel
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: !Sub
          - "OrderModel-${EnvironmentClass}"
          - { EnvironmentClass: !Ref EnvironmentClass }
        type: object
        items:
          type: object
          properties:
            _cid:
              type: integer
            title:
              type: string
            machineTitle:
              type: string
            logoUrl:
              type: string
            address1:
              type: string
            address2:
              type: string
            city:
              type: string
            state:
              type: string
            zip:
              type: string
            contactName:
              type: string
            contactEmail:
              type: string
            contactPhone:
              type: string
            websiteUrl:
              type: string
            companyStore:
              type: string
            emailFromAddress:
              type: string
            receiptEmail:
              type: string
            shippingNotificationEmail:
              type: string
            thankYouEmail:
              type: string
            authToken:
              type: string
            orderApiEndpoint:
              type: string
            productApiEndpoint:
              type: string
              
  # Order model
  OrderModel: 
    Type: AWS::ApiGateway::Model
    DependsOn: TagisRestApi
    Properties:
      RestApiId: !Ref TagisRestApi
      ContentType: application/json
      Description: Schema for TAGIS orders
      Name: OrderModel
      Schema: 
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: !Sub
          - "OrderModel-${EnvironmentClass}"
          - { EnvironmentClass: !Ref EnvironmentClass }
        type: object
        items:
          type: object
          properties:
            _oid:
              type: integer
            orderStatus:
              type: string
            createdDate:
              type: string
            lastModifiedDate:
              type: string
            products:
              type: array
            subtotal:
              type: number
            taxes:
              type: number
            shippingFees:
              type: number
            total:
              type: number
            store:
              type: integer
            orderSource:
              type: string
            customerName:
              type: string
            customerEmail:
              type: string
            customerPhone:
              type: string
            customerAddress1:
              type: string
            customerAddress2:
              type: string
            customerCity:
              type: string
            customerState:
              type: string
            customerZip:
              type: string
            shippingName:
              type: string
            refNumber:
              type: string
            trackingNumber:
              type: string
            shippingCarrier:
              type: string
            receiptEmailSent:
              type: string
            shippingEmailSent:
              type: string
            orderNotificationEmail:
              type: string
              
  # Order item model          
  OrderItemModel:
    Type: AWS::ApiGateway::Model
    DependsOn: TagisRestApi
    Properties:
      RestApiId: !Ref TagisRestApi
      ContentType: application/json
      Description: Schema for TAGIS order items
      Name: OrderItemModel
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: !Sub
          - "OrderItemModel-${EnvironmentClass}"
          - { EnvironmentClass: !Ref EnvironmentClass }
        type: object
        items: 
          type: object
          properties:
            _oiid:
              type: integer
            sku:
              type: string
            title:
              type: string
            quantity:
              type: integer
            order_oid:
              type: integer
            productOptions:
              type: array
      
  # User model
  UserModel:
    Type: AWS::ApiGateway::Model
    DependsOn: TagisRestApi
    Properties:
      RestApiId: !Ref TagisRestApi
      ContentType: application/json
      Description: Schema for TAGIS users
      Name: UserModel
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: !Sub
          - "UserModel-${EnvironmentClass}"
          - { EnvironmentClass: !Ref EnvironmentClass }
        type: object
        items:
          type: object
          properties:
            _uid:
              type: integer
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            password:
              type: string
            active:
              type: boolean
            lastLogin:
              type: string
            profilePicture:
              type: string
            role:
              type: integer
            store:
              type: integer
  # User authentication model
  UserAuthenticationModel:
    Type: AWS::ApiGateway::Model
    DependsOn: TagisRestApi
    Properties:
      RestApiId: !Ref TagisRestApi
      ContentType: application/json
      Description: Schema for TAGIS users
      Name: UserAuthenticationModel
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: !Sub
          - "UserAuthenticationModel-${EnvironmentClass}"
          - { EnvironmentClass: !Ref EnvironmentClass }
        type: object
        items:
          type: object
          properties:
            Email:
              type: string
            Password:
              type: string
      
  ## API Lambda Functions
  ## Orders
  # GetOrders – GET /orders
  GetOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetOrders
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetOrders"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrdersFunction:
          Type: Api
          Properties:
            Path: /orders
            Method: get
            RestApiId: !Ref TagisRestApi

  # GetOrderList – GET /orders/list
  GetOrderListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetOrderList
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetOrderList"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrderListFunction:
          Type: Api
          Properties:
            Path: /orders/list
            Method: get
            RestApiId: !Ref TagisRestApi

  # GetOrder – GET /orders/{id}
  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetOrder
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetOrder"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrderFunction:
          Type: Api
          Properties:
            Path: /orders/{id}
            Method: get
            RestApiId: !Ref TagisRestApi

  # GetRecentOrders – GET /orders/recent
  GetRecentOrders:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetRecentOrders
      FunctionName: !Sub 
        - "tagis-${EnvironmentClass}-GetRecentOrders"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetRecentOrders:
          Type: Api
          Properties:
            Path: /orders/recent
            Method: get
            RestApiId: !Ref TagisRestApi

  # PostOrder – POST /orders
  PostOrder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::PostOrder
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-PostOrder"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        PostOrder:
          Type: Api
          Properties:
            Path: /orders
            Method: post
            RestApiId: !Ref TagisRestApi
#            RequestModel: 
#              Model: !Ref OrderModel
#              Required: true
          
  ## Stores  
  # GetStore – GET /stores
  GetStores:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStores
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStores"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetStores:
          Type: Api
          Properties:
            Path: /stores
            Method: get
            RestApiId: !Ref TagisRestApi
            
  # GetRecentStores – GET /stores/recent
  GetRecentStores:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetRecentStores
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetRecentStores"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetRecentStore:
          Type: Api
          Properties:
            Path: /stores/recent
            Method: get
            RestApiId: !Ref TagisRestApi
            
            
  # GetStoreByName – GET /stores/name/{name}
  GetStoreByName:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStoreByName
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStoreByName"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetStoreByName:
          Type: Api
          Properties:
            Path: /stores/name/{name}
            Method: get
            RestApiId: !Ref TagisRestApi
            RequestParameters: 
              - method.request.path.name:
                  Required: true
  
  # GetStoreById –GET /stores/{id}
  GetStoreById:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStoreById
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStoreById"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetStoreById:
          Type: Api
          Properties:
            Path: /stores/{id}
            Method: get
            RestApiId: !Ref TagisRestApi
            RequestParameters:
              - method.request.path.id:
                  Required: true
                
  # GetStoreProducts –GET /stores/products/{id}
  GetStoreProducts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStoreProducts
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStoreProducts"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetStoreProducts:
          Type: Api
          Properties:
            Path: /stores/products/{id}
            Method: get
            RestApiId: !Ref TagisRestApi
            RequestParameters:
              - method.request.path.id:
                  Required: true
           
  # GetStoreOrders – GET /stores/orders/{id}
  GetStoreOrders:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStoreOrders
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStoreOrders"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetStoreOrders:
          Type: Api
          Properties:
            Path: /stores/orders/{id}
            Method: get
            RestApiId: !Ref TagisRestApi
            RequestParameters:
              - method.request.path.id:
                  Required: true
        
  # PostStore – POST /stores          
  PostStore:
    Type: AWS::Serverless::Function
    Properties: 
      Handler: tagisApi::tagisApi.Controllers.StoreController::PostStore
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-PostStore"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        PostStore: 
          Type: Api
          Properties:
            Path: /stores
            Method: post
            RestApiId: !Ref TagisRestApi
#            RequestModel:
#              Model: !Ref StoreModel
#              Required: true
              
  ## Users
  # Authenticate – POST /users/authenticate
  AuthenticateFunction:
    Type: AWS::Serverless::Function
    Properties: 
      Handler: tagisApi::tagisApi.Controllers.UserController::Authenticate
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-UserAuthenticate"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        PostStore:
          Type: Api
          Properties:
            Path: /users/authenticate
            Method: post
            RestApiId: !Ref TagisRestApi
#            RequestModel:
#              Model: !Ref UserModel
#              Required: true
            
  ## RestAPI base settings
  TagisRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: TagisRestApi
      StageName: !Ref EnvironmentClass
      EndpointConfiguration: EDGE
      Auth:
        ApiKeyRequired: true
#      Models:
#        OrderModel: !Ref OrderModel
#        OrderItemMode: !Ref OrderItemModel
#        StoreModel: !Ref StoreModel
#        UserAuthenticationModel: !Ref UserAuthenticationModel
#        UserModel: !Ref UserModel