AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Template for TAGIS application"

# Template Parameters
Parameters:
  EnvironmentClass:
    Description: Environment (Dev, Stage, Prod)
    Type: String
    AllowedValues: 
      - Dev
      - Stage
      - Prod

# Template resources
Resources:
  ## IAM roles for buckets and RDS 
  #  TagisBucketRole:
  #    Type: AWS::IAM::Role
  #    Properties:
  #      AssumeRolePolicyDocument:
  #        Version: 2012-10-17
  #        Statement:
  #          - Effect: Allow
  #            Principal:
  #            Service:
  #              - "s3.amazonaws.com"
  #            Action:
  #              - "sts:AssumeRole"
  #        Path: "/"
  #  TagisBucketPolicy:
  #    Type: AWS::IAM::Policy
  #    Properties:
  #      PolicyName: "TagisBucket"
  #      PolicyDocument:
  #        Version: "2012-10-17"
  #        Statement:
  #          -
  #            Effect: "Allow"
  #            Action: "*"
  #            Resource: "Tagis-Build-Bucket"
  #        Roles:
  #          -
  #            Ref: "TagisBucketRole"
  #  TagisBucketProfile:
  #    Type: AWS::IAM::InstanceProfile
  #    Properties:
  #      Path: "/"
  #      Roles:
  #        -
  #          Ref: "TagisbucketRole"

  ## S3 buckets
  # S3 bucket for Circle CI builds
#  BuildBucket:
#    Type: AWS::S3::Bucket
#    DeletionPolicy: Retain
#    Properties:
#      BucketName: tagis-build-bucket
#      Tags:
#        -
#          Key: "client"
#          Value: "Advent Group"
#        -
#          Key: "application"
#          Value: "tagis-build"

  # S3 bucket for static website hosting
#  ClientBucket:
#    Type: AWS::S3::Bucket
#    DeletionPolicy: Retain
#    Properties:
#      BucketName: tagis-client
#      Tags:
#        -
#          Key: "client"
#          Value: "Advent Group"
#        -
#          Key: "application"
#          Value: "tagis-client"
#      WebsiteConfiguration:
#        IndexDocument: "index.html"

  ## API models
  # Store
  StoreModel:
    Type: AWS::ApiGateway::Model
    DependsOn: TagisRestApi
    Properties:
      RestApiId: !Ref TagisRestApi
      ContentType: application/json
      Description: Schema for TAGIS stores
      Name: StoreModel
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: !Sub
          - "OrderModel-${EnvironmentClass}"
          - { EnvironmentClass: !Ref EnvironmentClass }
        type: object
        items:
          type: object
          properties:
            _cid:
              type: integer
            title:
              type: string
            machineTitle:
              type: string
            logoUrl:
              type: string
            address1:
              type: string
            address2:
              type: string
            city:
              type: string
            state:
              type: string
            zip:
              type: string
            contactName:
              type: string
            contactEmail:
              type: string
            contactPhone:
              type: string
            websiteUrl:
              type: string
            companyStore:
              type: string
            emailFromAddress:
              type: string
            receiptEmail:
              type: string
            shippingNotificationEmail:
              type: string
            thankYouEmail:
              type: string
            authToken:
              type: string
            orderApiEndpoint:
              type: string
            productApiEndpoint:
              type: string
      
  ### API Lambda Functions
  ## Orders
  # GetOrders – GET /orders
  GetOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetOrders
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetOrders"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrders:
          Type: Api
          Properties:
            Path: /orders
            Method: get
            RestApiId: !Ref TagisRestApi

  # GetOrderList – GET /orders/list
  GetOrderListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetOrderList
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetOrderList"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrderList:
          Type: Api
          Properties:
            Path: /orders/list
            Method: get
            RestApiId: !Ref TagisRestApi

  # GetOrder – GET /orders/{id}
  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetOrder
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetOrder"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /orders/{id}
            Method: get
            RestApiId: !Ref TagisRestApi

  # GetRecentOrders – GET /orders/recent
  GetRecentOrders:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::GetRecentOrders
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub 
        - "tagis-${EnvironmentClass}-GetRecentOrders"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /orders/recent
            Method: get
            RestApiId: !Ref TagisRestApi

  # PostOrder – POST /orders
  PostOrder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.OrdersController::PostOrder
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-PostOrder"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /orders
            Method: post
            RestApiId: !Ref TagisRestApi
          
  ## Stores  
  # GetStore – GET /stores
  GetStores:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStores
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStores"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /stores
            Method: get
            RestApiId: !Ref TagisRestApi
            
  # GetRecentStores – GET /stores/recent
  GetRecentStore:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetRecentStores
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetRecentStores"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /stores/recent
            Method: get
            RestApiId: !Ref TagisRestApi
            
            
  # GetStoreByName – GET /stores/name/{name}
  GetStoreByName:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStoreByName
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStoreByName"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /stores/name/{name}
            Method: get
            RestApiId: !Ref TagisRestApi
            RequestParameters: 
              - method.request.path.name:
                  Required: true
  
  # GetStoreById –GET /stores/{id}
  GetStoreById:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStoreById
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStoreById"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /stores/{id}
            Method: get
            RestApiId: !Ref TagisRestApi
            RequestParameters:
              - method.request.path.id:
                  Required: true
                
  # GetStoreProducts –GET /stores/products/{id}
  GetStoreProducts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStoreProducts
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStoreProducts"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /stores/products/{id}
            Method: get
            RestApiId: !Ref TagisRestApi
            RequestParameters:
              - method.request.path.id:
                  Required: true
           
  # GetStoreOrders – GET /stores/orders/{id}
  GetStoreOrders:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tagisApi::tagisApi.Controllers.StoreController::GetStoreOrders
      Runtime: dotnetcore2.1
      CodeUri: ./src/tagisApi/
      FunctionName: !Sub
        - "tagis-${EnvironmentClass}-GetStoreOrders"
        - { EnvironmentClass: !Ref EnvironmentClass }
      Events:
        GetOrder:
          Type: Api
          Properties:
            Path: /stores/orders/{id}
            Method: get
            RestApiId: !Ref TagisRestApi
            RequestParameters:
              - method.request.path.id:
                  Required: true
            
  ## RestAPI base settings
  TagisRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: TagisRestApi
      StageName: !Ref EnvironmentClass
      EndpointConfiguration: EDGE
      Auth:
        ApiKeyRequired: true
        
      